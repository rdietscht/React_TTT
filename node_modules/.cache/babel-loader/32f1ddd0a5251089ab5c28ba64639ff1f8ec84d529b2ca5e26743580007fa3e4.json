{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rdiet\\\\OneDrive\\\\Desktop\\\\EXTRAS\\\\SerialByte_Training\\\\TTT-React-Practice\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\n\n/**\r\n * Square component, containing a single value.\r\n * \r\n * Represents a single tile in an ongoing Tic-Tac-Toe game.\r\n * \r\n * @param {String} value The value to display in the browser\r\n * @param {Function} onSquareClick The function that a Square should call when it is clicked.\r\n * @returns {HTMLButtonElement} The button representing the Square with its value.\r\n */\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Square({\n  value,\n  onSquareClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: onSquareClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 5\n  }, this);\n}\n\n// Board holds data about the current state of the game.\n_c = Square;\nfunction Board({\n  xTurn,\n  squares,\n  onPlay\n}) {\n  /**\r\n   * Board method: Updates the square referenced by the given index.\r\n   * \r\n   * @param {Number} i The number value associated with an index in squares state.\r\n   */\n  function handleClick(i) {\n    // Early Exit - This square index already has a non-null value associated with it.\n    if (squares[i] || calculateWinner(squares)) {\n      return;\n    }\n    const nextSquares = squares.slice();\n\n    // Determine whose turn it is (X/O).\n    if (xTurn) {\n      nextSquares[i] = \"X\";\n    } else {\n      nextSquares[i] = \"O\";\n    }\n    onPlay(nextSquares);\n  }\n  function calculateWinner(squares) {\n    const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n    return null;\n  }\n\n  // Use the current status of the board to compute who's won/turn it is.\n  const winner = calculateWinner(squares);\n  let status;\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next Player: \" + (xTurn ? \"X\" : \"O\");\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[0],\n        onSquareClick: () => {\n          handleClick(0);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[1],\n        onSquareClick: () => {\n          handleClick(1);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[2],\n        onSquareClick: () => {\n          handleClick(2);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[3],\n        onSquareClick: () => {\n          handleClick(3);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[4],\n        onSquareClick: () => {\n          handleClick(4);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[5],\n        onSquareClick: () => {\n          handleClick(5);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [/*#__PURE__*/_jsxDEV(Square, {\n        value: squares[6],\n        onSquareClick: () => {\n          handleClick(6);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[7],\n        onSquareClick: () => {\n          handleClick(7);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Square, {\n        value: squares[8],\n        onSquareClick: () => {\n          handleClick(8);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n// Game controls Board data by letting it use its state.\n_c2 = Board;\nexport default function Game() {\n  _s();\n  // Game states to keep track of\n  // const [xIsNext, setXIsNext] = useState (true); // Old, redundant state. No longer used.\n  const [history, setHistory] = useState([Array(9).fill(null)]); // History is initialized to an array with one element: an array of 9 nulls (aka the initial state of our game.)\n  const [currentMove, setCurrentMove] = useState(0); // Tracks the current move index in the history we are in.\n  const currentSquares = history[currentMove]; // The current state of the Board should be the last step in history.\n\n  // This function handles a player's single turn in a game. Called by Board to update its state.\n  function handlePlay(nextSquares) {\n    // Get the history up to where we currently are in the history. Needed for time travel.\n    const nextHistory = [...history.slice(0, currentMove + 1), nextSquares];\n\n    // Update the history of the Game after appending it with the nextSquare array. Also update player turn and move states.\n    setHistory(nextHistory);\n    setCurrentMove(nextHistory.length - 1);\n    setXIsNext(!xIsNext);\n  }\n\n  // Used to get update the currentMove state in our Game component.\n  function jumpTo(nextMove) {\n    setCurrentMove(nextMove);\n    setXIsNext(nextMove % 2 === 0);\n  }\n\n  // The map function takes a callback function, (created using \"() => {}\" syntax) that will be used to transform a list of elements to another list of elements.\n  // In this case, we are transforming a list of string/null values to a list of button objects.\n  const moves = history.map((squares, move) => {\n    let description;\n    if (move > 0) {\n      description = 'Go to move #' + move;\n    } else {\n      description = 'Go to game start';\n    }\n\n    // This looks confusing, but it's actually very simple. All this is\n    // doing is returning a button element (encapsulated within a list element,\n    // since it is being rendered within a larger <ol> element,) that calls\n    // the \"jumpTo\" Game function when it is clicked. This button is rendered\n    // for each element in our history array. In other words, each entry in\n    // history will have an associated button that calls jumpTo. This array of\n    // button elements is then assigned to our \"moves\" variable to be rendered\n    // in our Game component.\n    // \n    // Additionally, we must use the key React attribute that tells\n    // the React compiler which list element is which. This is\n    // necessary anytime we have dynamic lists, (lists that can be\n    // modified/added to/deleted from). We must choose a number that\n    // stays consistent and doesn't get reordered, (i.e., the number\n    // associated with a move step in the history.)\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => jumpTo(move),\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }, this)\n    }, move, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 11\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        xTurn: xIsNext,\n        squares: currentSquares,\n        onPlay: handlePlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: moves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 184,\n    columnNumber: 5\n  }, this);\n}\n_s(Game, \"gzPlkCQ65VjbiP1+C+hwy00QeCQ=\");\n_c3 = Game;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Game\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Square","value","onSquareClick","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Board","xTurn","squares","onPlay","handleClick","i","calculateWinner","nextSquares","slice","lines","length","a","b","c","winner","status","_c2","Game","_s","history","setHistory","Array","fill","currentMove","setCurrentMove","currentSquares","handlePlay","nextHistory","setXIsNext","xIsNext","jumpTo","nextMove","moves","map","move","description","_c3","$RefreshReg$"],"sources":["C:/Users/rdiet/OneDrive/Desktop/EXTRAS/SerialByte_Training/TTT-React-Practice/src/App.js"],"sourcesContent":["import { useState } from 'react';\r\n\r\n/**\r\n * Square component, containing a single value.\r\n * \r\n * Represents a single tile in an ongoing Tic-Tac-Toe game.\r\n * \r\n * @param {String} value The value to display in the browser\r\n * @param {Function} onSquareClick The function that a Square should call when it is clicked.\r\n * @returns {HTMLButtonElement} The button representing the Square with its value.\r\n */\r\nfunction Square ({ value, onSquareClick })\r\n{\r\n  return(\r\n    <button\r\n      className=\"square\"\r\n      onClick={onSquareClick}\r\n    >\r\n      {value}\r\n    </button>\r\n  );\r\n}\r\n\r\n// Board holds data about the current state of the game.\r\nfunction Board({ xTurn, squares, onPlay })\r\n{\r\n\r\n  /**\r\n   * Board method: Updates the square referenced by the given index.\r\n   * \r\n   * @param {Number} i The number value associated with an index in squares state.\r\n   */\r\n  function handleClick (i)\r\n  {\r\n\r\n    // Early Exit - This square index already has a non-null value associated with it.\r\n    if (squares[i] || calculateWinner (squares))\r\n      {\r\n        return;\r\n      }\r\n\r\n    const nextSquares = squares.slice ();\r\n\r\n    // Determine whose turn it is (X/O).\r\n    if (xTurn)\r\n      {\r\n        nextSquares[i] = \"X\";\r\n      }\r\n    else\r\n      {\r\n        nextSquares[i] = \"O\";\r\n      }\r\n\r\n    onPlay (nextSquares);\r\n  }\r\n\r\n  function calculateWinner(squares)\r\n  {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6]\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return squares[a];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // Use the current status of the board to compute who's won/turn it is.\r\n  const winner = calculateWinner (squares);\r\n  let status;\r\n  if (winner)\r\n    {\r\n      status = \"Winner: \" + winner;\r\n    }\r\n  else\r\n    {\r\n      status = \"Next Player: \" + (xTurn ? \"X\" : \"O\");\r\n    }\r\n\r\n\r\n  return (\r\n    <>\r\n\r\n      {/* Status section to notify players of win */}\r\n      <div className=\"status\">{status}</div>\r\n\r\n      {/* Each board in the game is a 3x3 2D table with squares */}\r\n      <div className=\"board-row\">\r\n        <Square value={squares[0]} onSquareClick={() => { handleClick (0) }} />\r\n        <Square value={squares[1]} onSquareClick={() => { handleClick (1) }} />\r\n        <Square value={squares[2]} onSquareClick={() => { handleClick (2) }} />\r\n      </div>\r\n      <div className=\"board-row\">\r\n        <Square value={squares[3]} onSquareClick={() => { handleClick (3) }} />\r\n        <Square value={squares[4]} onSquareClick={() => { handleClick (4) }} />\r\n        <Square value={squares[5]} onSquareClick={() => { handleClick (5) }} />\r\n      </div>\r\n      <div className=\"board-row\">\r\n        <Square value={squares[6]} onSquareClick={() => { handleClick (6) }} />\r\n        <Square value={squares[7]} onSquareClick={() => { handleClick (7) }} />\r\n        <Square value={squares[8]} onSquareClick={() => { handleClick (8) }} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\n// Game controls Board data by letting it use its state.\r\nexport default function Game ()\r\n{\r\n\r\n  // Game states to keep track of\r\n  // const [xIsNext, setXIsNext] = useState (true); // Old, redundant state. No longer used.\r\n  const [history, setHistory] = useState ([Array(9).fill (null)]); // History is initialized to an array with one element: an array of 9 nulls (aka the initial state of our game.)\r\n  const [currentMove, setCurrentMove] = useState (0); // Tracks the current move index in the history we are in.\r\n  const currentSquares = history[currentMove]; // The current state of the Board should be the last step in history.\r\n\r\n  // This function handles a player's single turn in a game. Called by Board to update its state.\r\n  function handlePlay (nextSquares)\r\n    {\r\n      // Get the history up to where we currently are in the history. Needed for time travel.\r\n      const nextHistory = [...history.slice (0, currentMove + 1), nextSquares];\r\n\r\n      // Update the history of the Game after appending it with the nextSquare array. Also update player turn and move states.\r\n      setHistory (nextHistory);\r\n      setCurrentMove (nextHistory.length - 1);\r\n      setXIsNext (!xIsNext);\r\n    }\r\n\r\n    // Used to get update the currentMove state in our Game component.\r\n    function jumpTo (nextMove)\r\n      {\r\n        setCurrentMove (nextMove);\r\n        setXIsNext (nextMove % 2 === 0);\r\n      }\r\n\r\n      // The map function takes a callback function, (created using \"() => {}\" syntax) that will be used to transform a list of elements to another list of elements.\r\n      // In this case, we are transforming a list of string/null values to a list of button objects.\r\n      const moves = history.map ((squares, move) => {\r\n        let description;\r\n\r\n        if (move > 0)\r\n          {\r\n            description = 'Go to move #' + move;\r\n          }\r\n        else\r\n          {\r\n            description = 'Go to game start';\r\n          }\r\n\r\n        // This looks confusing, but it's actually very simple. All this is\r\n        // doing is returning a button element (encapsulated within a list element,\r\n        // since it is being rendered within a larger <ol> element,) that calls\r\n        // the \"jumpTo\" Game function when it is clicked. This button is rendered\r\n        // for each element in our history array. In other words, each entry in\r\n        // history will have an associated button that calls jumpTo. This array of\r\n        // button elements is then assigned to our \"moves\" variable to be rendered\r\n        // in our Game component.\r\n        // \r\n        // Additionally, we must use the key React attribute that tells\r\n        // the React compiler which list element is which. This is\r\n        // necessary anytime we have dynamic lists, (lists that can be\r\n        // modified/added to/deleted from). We must choose a number that\r\n        // stays consistent and doesn't get reordered, (i.e., the number\r\n        // associated with a move step in the history.)\r\n        return (\r\n          <li key={move}>\r\n            <button onClick={() => jumpTo (move)}>{description}</button>\r\n          </li>\r\n        );\r\n\r\n      });\r\n\r\n  return (\r\n    <div className='game'>\r\n      <div className='game-board'>\r\n        <Board xTurn={xIsNext} squares={currentSquares} onPlay={handlePlay} />\r\n      </div>\r\n      <div className='game-info'>\r\n        <ol>\r\n          {moves}\r\n        </ol>\r\n      </div>\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}